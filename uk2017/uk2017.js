(function() {
  var containerGraph1 = '.count-chart';
  var containerGraph2 = '.percentage-chart';
  var labels = [];


  function jsonWithRetry(url, retries, success) {
    var load = function() {
        d3.json(url, function(error, json) {
          error = error || json.errorMessage;
          retries--;
          if (error) {
            console.log(error);
            if (retries > 0) {
              load();
            }
          } else {
            success(json);
          }
        });
      }
      //load();
    success();
  }

  drawGraph(containerGraph1);
  drawGraph(containerGraph2, updateToPercentage, function(n) {
    return n + "%";
  });

  var rawData;

  function drawGraph(containerGraph, updateData, tickFormat) {
    var start = new Date(2016, 5, 15, 0, 0, 0, 0);
    var end = new Date(2016, 5, 25, 1, 0, 0, 0);

    var loaded;

    // Set the dimensions of the canvas / graph
    var margin = {
        top: 30,
        right: 20,
        bottom: 30,
        left: 55
      },
      width = 700 - margin.left - margin.right,
      height = 370 - margin.top - margin.bottom;

    // Set the ranges
    var x = d3.time.scale().range([0, width]);
    var y = d3.scale.linear().range([height, 0]);

    var labelElements;

    // Define the axes
    var xAxis = d3.svg.axis().scale(x)
      .orient("bottom")
      .tickFormat(d3.time.format.multi([
        [".%L", function(d) {
          return d.getMilliseconds();
        }],
        [":%S", function(d) {
          return d.getSeconds();
        }],
        ["%_H:%M", function(d) {
          return d.getMinutes();
        }],
        ["%_H:00", function(d) {
          return d.getHours();
        }],
        ["%a %d", function(d) {
          return d.getDay() && d.getDate() != 1;
        }],
        ["%b %d", function(d) {
          return d.getDate() != 1;
        }],
        ["%B", function(d) {
          return d.getMonth();
        }],
        ["%Y", function() {
          return true;
        }]
      ]));

    var yAxis = d3.svg.axis().scale(y)
      .orient("left")
      .ticks(6);

    if (tickFormat != undefined) {
      yAxis.tickFormat(tickFormat);
    }

    // Define the line
    var valueline = d3.svg.line()
      .interpolate("monotone")
      .x(function(v, i) {
        return x(data.time[i]);
      })
      .y(function(v) {
        return y(v);
      });

    // Define the line
    var line = d3.svg.line()
      .x(function(v) {
        return v[0];
      })
      .y(function(v) {
        return v[1];
      });

    // Adds the svg canvas
    var svg = d3.select(containerGraph)
      .append("svg")
      .attr("width", width + margin.left + margin.right)
      .attr("height", height + margin.top + margin.bottom)
      .append("g")
      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    svg.append("clipPath")
      .attr("id", "clip")
      .append("rect")
      .attr("width", width)
      .attr("height", height);

    var desc = d3.select(containerGraph)

    if (updateData) {
      desc.append("div")
        .attr("class", "percentage-chart-label")

      var div = d3.select('.percentage-chart-label');

      div.append("p");
    }

    var data;
    var zoom = d3.behavior.zoom();
    var minDate, maxDate;
    var length, maxYValue;

    function updateDomain() {
      minDate = d3.min(data.time);
      maxDate = d3.max(data.time);

      length = data.time.length;

      maxYValue = d3.max([d3.max(data.labour), d3.max(data.tory), d3.max(data
        .libDem), d3.max(data.snp)]);

      // Scale the range of the data
      var minDate = new Date(minDate);
      minDate.setDate(minDate.getDate());

      x.domain([minDate, moment(maxDate).add(1, "hours")._d]);

      y.domain([d3.min([d3.min(data.labour), d3.min(data.tory), d3.min(data.libDem),
        d3.min(data.snp)
      ]), maxYValue]);
    }


    function loadGraph() {
      loaded = true;

      updateDomain();
      zoom.x(x);

      var thick = 1;

      if (tickFormat != undefined) {
        svg.append("path")
          .attr("class", "x-axis-election-2017")
          .style('stroke-width', thick)
          .attr("d", line([
            [0, y(50)],
            [width, y(50)]
          ]));
      }

      svg.append("clipPath")
        .attr("id", "clip-all-election-2017")
        .append("rect")
        .attr("x", 0)
        .attr("y", 0)
        .attr("width", width)
        .attr("height", height);

      svg.append("path")
        .attr("class", "line-labour")
        .attr("clip-path", "url(#clip-all-election-2017)")
        .attr("d", valueline(data.labour));

      svg.append("path")
        .attr("class", "line-tory")
        .attr("clip-path", "url(#clip-all-election-2017)")
        .attr("d", valueline(data.tory));


      svg.append("path")
        .attr("class", "line-libDem")
        .attr("clip-path", "url(#clip-all-election-2017)")
        .attr("d", valueline(data.libDem));

      svg.append("path")
        .attr("class", "line-snp")
        .attr("clip-path", "url(#clip-all-election-2017)")
        .attr("d", valueline(data.snp));

      labelElements = svg.selectAll(".percentage-chart-label").data(labels);
      var labelGroups = labelElements.enter()
        .append("g")
        .attr("class", "label-group")
        .attr("clip-path", "url(#clip-all-election-2017)");

      labelGroups.append("path")
        .attr("class", "label-left")
        .attr("clip-path", "url(#clip-all-election-2017)")
        .attr("d", line([
          [0, 0],
          [0, height]
        ]));
      labelGroups.append("path")
        .attr("class", "label-right")
        .attr("clip-path", "url(#clip-all-election-2017)")
        .attr("d", line([
          [0, 0],
          [0, height]
        ]));
      labelGroups.append("path")
        .attr("class", "election-2017-label-bottom")
        .attr("clip-path", "url(#clip-all-election-2017)")
        .attr("d", line([
          [0, 0],
          [0, 0]
        ]));

      if (updateData) {
        updateLabels();
      }

      // Add the X Axis
      svg.append("g")
        .attr("class", "x axis")
        .attr("transform", "translate(0," + height + ")")
        .call(xAxis);

      // Add the Y Axis
      svg.append("g")
        .attr("class", "y axis")
        .call(yAxis);

      var focusGroup = svg.append("g");

      var focusLine = focusGroup.append("path")
        .attr("class", "focus-line")
        .attr("d", line([
          [0, 0],
          [0, height]
        ]));

      var focusCircleLabour = focusGroup.append("g");
      focusCircleLabour.append("circle").attr("r", 3);

      var focusLabelLabour = focusCircleLabour
        .append("text")
        .attr("class", "focus-label-labour")
        .attr("dx", 5)
        .attr("dy", -5)
        .text("");


      var focusCircleTory = focusGroup.append("g");
      focusCircleTory.append("circle").attr("r", 3);

      var focusLabelTory = focusCircleTory
        .append("text")
        .attr("class", "focus-label-tory")
        .attr("dx", 5)
        .attr("dy", -5)
        .text("");


      var focusCircleLibDem = focusGroup.append("g");
      focusCircleLibDem.append("circle").attr("r", 3);

      var focusLabelLibDem = focusCircleLibDem
        .append("text")
        .attr("class", "focus-label-libDem")
        .attr("dx", 5)
        .attr("dy", -5)
        .text("");


      var focusCircleSNP = focusGroup.append("g");
      focusCircleSNP.append("circle").attr("r", 3);

      var focusLabelSNP = focusCircleSNP
        .append("text")
        .attr("class", "focus-label-snp")
        .attr("dx", 5)
        .attr("dy", -5)
        .text("");

      svg.append("rect")
        .attr("class", "graph-overlay")
        .attr("width", width)
        .attr("height", height)
        .on("mouseover", function() {
          focusGroup.style("display", null);
        })
        .on("mouseout", function() {
          focusGroup.style("display", "none");
        })
        .on("mousemove", mousemove)
        .call(zoom.scaleExtent([1, 10]).on("zoom", mousezoom))
        .on("mousewheel.zoom", mousezoom);

      function mousemove() {

        var mouseX = d3.mouse(this)[0]
        var dataX = x.invert(mouseX);


        index = 0;
        while (data.time[index] && dataX.getTime() > data.time[index].getTime()) {
          index++
        }
        index--;

        if (index < 0 || index > length - 1) {
          focusGroup.style("display", "none");
        } else {
          focusGroup.style("display", null);
          var circleX = x(dataX);

          // var parties = [
          //   {name:'labour', value: data.labour[dataX]},
          //   {name:'tory', value: data.tory[dataX]},
          //   {name:'libDem', value: data.libDem[dataX]},
          //   {name:'snp', value: data.snp[dataX]}
          // ];
          // parties.sort(function(a,b){
          //   return a.
          // })
          // TODO: Order labels by number of tweets
          // var compare = x[dataX] > data.remain[dataX];
          // var topPosition = y(d3.max([d3.max(data.leave), d3.max(data.remain)]));
          // var bottomPosition = topPosition + 30;
          //
          // var circleYRemain = data.leave[dataX] > data.remain[dataX] ?
          //   topPosition : bottomPosition;
          // var circleYLeave = data.leave[dataX] <= data.remain[dataX] ?
          //   bottomPosition : topPosition;

          // var textLeave = tickFormat != undefined ? tickFormat(Math.round(
          //   data.leave[index])) : Math.round(data.leave[index]);
          // focusLabelLeave.text(textLeave);
          //
          // var textRemain = tickFormat != undefined ? tickFormat(Math.round(
          //   data.remain[index])) : Math.round(data.remain[index]);
          // focusLabelRemain.text(textRemain);

          var textLabour = tickFormat != undefined ? tickFormat(Math.round(
            data.labour[index])) : Math.round(data.labour[index]);
          focusLabelLabour.text(textLabour);

          var textTory = tickFormat != undefined ? tickFormat(Math.round(
            data.tory[index])) : Math.round(data.tory[index]);
          focusLabelTory.text(textTory);

          var textLibDem = tickFormat != undefined ? tickFormat(Math.round(
            data.libDem[index])) : Math.round(data.libDem[index]);
          focusLabelLibDem.text(textLibDem);

          var textSNP = tickFormat != undefined ? tickFormat(Math.round(
            data.snp[index])) : Math.round(data.snp[index]);
          focusLabelSNP.text(textSNP);

          focusLine.attr("transform", "translate(" + circleX + ",0)");

          focusCircleLabour.attr("transform", "translate(" + circleX + ","+ y(data.labour[index]) +")")
            .attr("cy", data.labour[index]);
          focusCircleTory.attr("transform", "translate(" + circleX + ","+ y(data.tory[index])+")");
          focusCircleLibDem.attr("transform", "translate(" + circleX + ","+ y(data.libDem[index])+")");
          focusCircleSNP.attr("transform", "translate(" + circleX + ","+ y(data.snp[index])+")");
        }

        var activeLabel = labels.filter(function(label) {
          return label.start < dataX && dataX < label.end
        })[0];

        desc.selectAll("p").text(activeLabel ? activeLabel.title : "");
      }

      function mousezoom() {
        updatePosition();
        redraw();
      }

    }

    function updatePosition() {

      var minDate = d3.min(data.time);
      var maxDate = d3.max(data.time);


      var length = x(maxDate) - x(minDate);
      var min = -(length - width);
      //console.log("min",min, length);
      //console.log("currentTranstate", currentTranstate[0])
      var currentTranstate = zoom.translate();

      if (currentTranstate[0] > 0) {
        zoom.translate([0, currentTranstate[1]]);
      }


      if (currentTranstate[0] < min) {
        zoom.translate([min, currentTranstate[1]]);
      }
    }

    function indexOfDate(myArray, searchDate) {
      for (var i = 0, len = myArray.length; i < len; i++) {
        if (myArray[i].toString() === searchDate.toString()) return i;
      }
      return -1;
    }

    function redraw() {

      // Add the valueline path.
      svg.select(".line-labour").attr("d", valueline(data.labour));
      svg.select(".line-tory").attr("d", valueline(data.tory));
      svg.select(".line-libDem").attr("d", valueline(data.libDem));
      svg.select(".line-snp").attr("d", valueline(data.snp));

      // Add the Y Axis
      svg.select(".y.axis").call(yAxis);
      svg.select(".x.axis").call(xAxis);

      if (updateData) {
        updateLabels();
      }
    }

    function getDateX(date) {
      return x(date);
    }

    function updateLabels() {

      labelElements.selectAll(".label-left")
        .attr("d", function(data) {
          var start = getDateX(data.start);
          return line([
            [start, 0],
            [start, height - 4]
          ])
        });

      labelElements.selectAll(".label-right")
        .attr("d", function(data) {
          var start = getDateX(data.end);
          return line([
            [start, 0],
            [start, height - 4]
          ])
        });

      labelElements.selectAll(".election-2017-label-bottom")
        .attr("d", function(data) {
          return line([
            [getDateX(data.start), height - 4],
            [getDateX(data.end), height - 4]
          ])
        });
    }

    loadPastData();

    function loadPastData() {
      jsonWithRetry(
        "https://4vp2c3noje.execute-api.eu-west-1.amazonaws.com/prod/frontend",
        3,
        function(json) {


          data = JSON.parse('{"tory": [0.3181377303588749, 0.35870556061987235, 0.5177700348432056, 0.6302876480541455, 0.5333978702807357, 0.5404411764705882, 0.27254276601913596, 0.22678975788190212, 0.32210078931390407, 0.34994928271265036, 0.34263295553618134, 0.31647419967840956, 0.32211014176663033, 0.3164594877939194, 0.27459795953657273, 0.32158273381294966, 0.2960837272113437, 0.29375, 0.2851888527373037, 0.08931391472188104, -0.6204195804195805, 0.3029588588942591, 0.2874767987771591, 0.43204927649589364, 0.4060616497330808, 0.4743935309973046, 0.6032697547683924, 0.7155756207674944, 0.5915492957746479, 0.5346534653465347, 0.31000448631673394, 0.3297400126823082, 0.3238007380073801, 0.273486059314509, 0.3236536430834213, 0.3102015694722265, 0.2885542877308552, 0.29324568187677236, 0.30559646539027985, 0.33378584761581537, 0.31935176358436607, 0.260702746365105, 0.32796980532379816, 0.40882475951484737, 0.514871382636656, 0.3825183903072263, 0.4805897723030982, 0.40208062418725615, 0.43016558675305977, 0.511497476163769, 0.5664403491755577, 0.5284280936454849, 0.5905044510385756, 0.5072463768115942, 0.4976392823418319, 0.3821057834898665, 0.45681677976557683, 0.40562863260936066, 0.2540376850605653, 0.3216863990759457, 0.44641460234680574, 0.43432379894473755, 0.3675111773472429, 0.4325, 0.3553530751708428, 0.44663930220625964, 0.44888728062239913, 0.4781379160321949, 0.5203862660944206, 0.4430730478589421, 0.30946930280957335, 0.35755645628257093, 0.5503493629264283, 0.5756997455470738, 0.51010101010101, 0.5776805251641138, 0.5975274725274725, 0.46893787575150303, 0.4824242424242424, 0.5063224446786091, 0.3949688796680498, 0.3486027591085957, 0.3469616802950136, 0.36050632911392405, 0.3803927402558762, 0.35873642645607107, 0.36833088595203134, 0.34231378763866877, 0.2066793439505586, 0.1885014137606032, 0.22056250841071187, 0.28469595577538553, 0.22634668508287292, 0.29606879606879605, 0.29266385108712656, 0.2893591772151899, 0.2669717772692601, 0.3657174762702401, 0.48450134770889486, 0.2949852507374631, 0.6300211416490487, 0.647918188458729, 0.44015444015444016, 0.4596217352146503, 0.3436325678496868, 0.3435715692065367, 0.2594654788418708, 0.2445588968267154, 0.2717487206634904, 0.27157738095238093, 0.30507716394542606, 0.22793511135551278, 0.2196367763904654, 0.20547204498756352, 0.230442880794702, 0.21726632966597284, 0.20875824835032994, 0.2184757505773672, 0.20293301625049545, 0.3598712746606968, 0.26329723225030083, 0.3976063829787234, 0.4289256198347107, 0.3968668407310705, 0.34918032786885245, -0.2345679012345679, 0.23677452491011813, 0.336834208552138, 0.3216335902903067, 0.3226045683773361, 0.20445878556761513, 0.15068391317276242, 0.14390879478827362, 0.15599253847349603, 0.17304477057402934, 0.23837765448632103, 0.24431039210309843, 0.23643543956043955, 0.25823060188542424, 0.23799804774159197, 0.21536489332478712, 0.2558818326552273, 0.27638783590261984, 0.2176679309922917, 0.20408631772268135, 0.3359283768003114, 0.3246527777777778, 0.4859359844810863, 0.47080630213160335, 0.4287598944591029, 0.30099962976675304, 0.2773795300677021, 0.26080670811045253], "labour": [0.6287584869059166, 0.6002734731084777, 0.45017421602787455, 0.3544839255499154, 0.43756050338818975, 0.4470588235294118, 0.6326471440997391, 0.6763630029611566, 0.5833333333333334, 0.5715113751630199, 0.5460621912234815, 0.5629293962870925, 0.5584787350054525, 0.5742099745394639, 0.6218225834342037, 0.5433453237410072, 0.5830519918973667, 0.5859042553191489, 0.5456217286744943, 0.7366204597297772, 1.372867132867133, 0.5556996345632441, 0.6023583360628889, 0.4651935862338678, 0.4882038918546582, 0.4328070850981902, 0.33896457765667576, 0.23852520692249812, 0.34683098591549294, 0.3628005657708628, 0.5881561238223418, 0.5766222785880364, 0.5951722017220172, 0.6352335286805185, 0.5939809926082366, 0.5988613632866595, 0.6409834137160334, 0.597318896622841, 0.5984904270986745, 0.5426777532665875, 0.5733079122974262, 0.6128836833602584, 0.544497417560588, 0.5029276453366792, 0.36937299035369775, 0.468628299437473, 0.42683837252706236, 0.4977893368010403, 0.45680345572354214, 0.3847448121144139, 0.3646944713870029, 0.4431438127090301, 0.3516320474777448, 0.4106280193236715, 0.39943342776203966, 0.45130993573900147, 0.43985194324491056, 0.47109207708779444, 0.5958950201884253, 0.5209356049667918, 0.3799217731421121, 0.3982227159122466, 0.4998509687034277, 0.43475, 0.4601366742596811, 0.3973832734735762, 0.3965985163741632, 0.3885142484228845, 0.3135729613733906, 0.428463476070529, 0.6106139438085327, 0.5657209033005212, 0.39786272092067404, 0.3657760814249364, 0.4494949494949495, 0.34463894967177244, 0.35302197802197804, 0.5290581162324649, 0.43393939393939396, 0.4130663856691254, 0.4880705394190871, 0.5259992925362575, 0.45342312008978675, 0.43561181434599155, 0.4732222552811663, 0.5267522211253702, 0.5029368575624082, 0.5254697758659724, 0.7186831471357261, 0.7213713477851084, 0.6424438164446239, 0.6242362525458248, 0.6616022099447514, 0.577044577044577, 0.6319411856718286, 0.6303401898734177, 0.6586575133485889, 0.5968732551647125, 0.5026954177897575, 0.6592920353982301, 0.34460887949260044, 0.3060628195763331, 0.4765581908439051, 0.48303812668868207, 0.61419624217119, 0.5940145697972041, 0.6775373846643334, 0.6502741319156006, 0.567496029645315, 0.6125372023809523, 0.5593826884365913, 0.6268902941985153, 0.6819901626939084, 0.7358062074186222, 0.7178187086092715, 0.7367429874120329, 0.7331390864684206, 0.7255196304849885, 0.7282005548949663, 0.5775850006995943, 0.6642599277978339, 0.5487588652482269, 0.4859504132231405, 0.4255874673629243, 0.5344262295081967, 1.0419753086419754, 0.7005649717514124, 0.5938984746186546, 0.6135804494013449, 0.5863245327795906, 0.7197125256673511, 0.8083556348498364, 0.82, 0.7868801492305301, 0.7743823146944083, 0.7141763918117467, 0.6895164975779179, 0.6862980769230769, 0.6747643219724438, 0.7091134972047209, 0.7216372127094588, 0.6793737838315939, 0.6547889815516805, 0.7074513642481342, 0.7334710743801653, 0.5924484235110938, 0.6215277777777778, 0.475266731328807, 0.47914735866543096, 0.5171503957783641, 0.6127360236949279, 0.6131023496614895, 0.6771721844730374], "time": ["2017-05-11 00:00:00", "2017-05-11 01:00:00", "2017-05-11 02:00:00", "2017-05-11 03:00:00", "2017-05-11 04:00:00", "2017-05-11 05:00:00", "2017-05-11 06:00:00", "2017-05-11 07:00:00", "2017-05-11 08:00:00", "2017-05-11 09:00:00", "2017-05-11 10:00:00", "2017-05-11 11:00:00", "2017-05-11 12:00:00", "2017-05-11 13:00:00", "2017-05-11 14:00:00", "2017-05-11 15:00:00", "2017-05-11 16:00:00", "2017-05-11 17:00:00", "2017-05-11 18:00:00", "2017-05-11 19:00:00", "2017-05-11 20:00:00", "2017-05-11 21:00:00", "2017-05-11 22:00:00", "2017-05-11 23:00:00", "2017-05-12 00:00:00", "2017-05-12 01:00:00", "2017-05-12 02:00:00", "2017-05-12 03:00:00", "2017-05-12 04:00:00", "2017-05-12 05:00:00", "2017-05-12 06:00:00", "2017-05-12 07:00:00", "2017-05-12 08:00:00", "2017-05-12 09:00:00", "2017-05-12 10:00:00", "2017-05-12 11:00:00", "2017-05-12 12:00:00", "2017-05-12 13:00:00", "2017-05-12 14:00:00", "2017-05-12 15:00:00", "2017-05-12 16:00:00", "2017-05-12 17:00:00", "2017-05-12 18:00:00", "2017-05-12 19:00:00", "2017-05-12 20:00:00", "2017-05-12 21:00:00", "2017-05-12 22:00:00", "2017-05-12 23:00:00", "2017-05-13 00:00:00", "2017-05-13 01:00:00", "2017-05-13 02:00:00", "2017-05-13 03:00:00", "2017-05-13 04:00:00", "2017-05-13 05:00:00", "2017-05-13 06:00:00", "2017-05-13 07:00:00", "2017-05-13 08:00:00", "2017-05-13 09:00:00", "2017-05-13 10:00:00", "2017-05-13 11:00:00", "2017-05-13 12:00:00", "2017-05-13 13:00:00", "2017-05-13 14:00:00", "2017-05-13 15:00:00", "2017-05-13 16:00:00", "2017-05-13 17:00:00", "2017-05-13 18:00:00", "2017-05-13 19:00:00", "2017-05-13 20:00:00", "2017-05-13 21:00:00", "2017-05-13 22:00:00", "2017-05-13 23:00:00", "2017-05-14 00:00:00", "2017-05-14 01:00:00", "2017-05-14 02:00:00", "2017-05-14 03:00:00", "2017-05-14 04:00:00", "2017-05-14 05:00:00", "2017-05-14 06:00:00", "2017-05-14 07:00:00", "2017-05-14 08:00:00", "2017-05-14 09:00:00", "2017-05-14 10:00:00", "2017-05-14 11:00:00", "2017-05-14 12:00:00", "2017-05-14 13:00:00", "2017-05-14 14:00:00", "2017-05-14 15:00:00", "2017-05-14 16:00:00", "2017-05-14 17:00:00", "2017-05-14 18:00:00", "2017-05-14 19:00:00", "2017-05-14 20:00:00", "2017-05-14 21:00:00", "2017-05-14 22:00:00", "2017-05-14 23:00:00", "2017-05-15 00:00:00", "2017-05-15 01:00:00", "2017-05-15 02:00:00", "2017-05-15 03:00:00", "2017-05-15 04:00:00", "2017-05-15 05:00:00", "2017-05-15 06:00:00", "2017-05-15 07:00:00", "2017-05-15 08:00:00", "2017-05-15 09:00:00", "2017-05-15 10:00:00", "2017-05-15 11:00:00", "2017-05-15 12:00:00", "2017-05-15 13:00:00", "2017-05-15 14:00:00", "2017-05-15 15:00:00", "2017-05-15 16:00:00", "2017-05-15 17:00:00", "2017-05-15 18:00:00", "2017-05-15 19:00:00", "2017-05-15 20:00:00", "2017-05-15 21:00:00", "2017-05-15 22:00:00", "2017-05-15 23:00:00", "2017-05-16 00:00:00", "2017-05-16 01:00:00", "2017-05-16 02:00:00", "2017-05-16 03:00:00", "2017-05-16 04:00:00", "2017-05-16 05:00:00", "2017-05-16 06:00:00", "2017-05-16 07:00:00", "2017-05-16 08:00:00", "2017-05-16 09:00:00", "2017-05-16 10:00:00", "2017-05-16 11:00:00", "2017-05-16 12:00:00", "2017-05-16 13:00:00", "2017-05-16 14:00:00", "2017-05-16 15:00:00", "2017-05-16 16:00:00", "2017-05-16 17:00:00", "2017-05-16 18:00:00", "2017-05-16 19:00:00", "2017-05-16 20:00:00", "2017-05-16 21:00:00", "2017-05-16 22:00:00", "2017-05-16 23:00:00", "2017-05-17 00:00:00", "2017-05-17 01:00:00", "2017-05-17 02:00:00", "2017-05-17 03:00:00", "2017-05-17 04:00:00", "2017-05-17 05:00:00", "2017-05-17 06:00:00", "2017-05-17 07:00:00", "2017-05-17 08:00:00"], "snp": [0.03903976721629486, 0.0300820419325433, 0.027177700348432057, 0.009306260575296108, 0.02904162633107454, 0.0029411764705882353, 0.052478979414322995, 0.050165476397840095, 0.05206435944140862, 0.038979857991595424, 0.05841325196163906, 0.04560736734395556,'+
          '0.06393129770992366, 0.05451550097349109, 0.058793014006570984, 0.06708633093525179, 0.054692775151924375, 0.06103723404255319, 0.06761918234545197, 0.07510089489384103, 0.13034965034965035, 0.073558882470824, 0.06201550387596899, 0.07860774344935471, 0.08730842087136215, 0.07277628032345014, 0.041961852861035424, 0.008276899924755455, 0.04137323943661972, 0.06223479490806223, 0.059219380888290714, 0.05939547664341577, 0.05289052890528905, 0.06996980998046529, 0.06300598380851813, 0.07278042775811663, 0.056346312198564875, 0.09138953338489302, 0.0780559646539028, 0.10181571355845918, 0.07778836987607245, 0.10016155088852989, 0.08680969408025427, 0.04809703053115851, 0.08319935691318328, 0.11488533102553007, 0.0675625233296006, 0.07984395318595579, 0.09719222462203024, 0.09141895681435783, 0.05140640155189137, 0.011705685618729096, 0.05341246290801187, 0.07085346215780998, 0.06893295561850803, 0.13445378151260504, 0.07896360271437385, 0.09911287855613338, 0.11776581426648722, 0.1348541726826451, 0.14863102998696218, 0.15412385448486532, 0.11564828614008942, 0.1175, 0.15034168564920272, 0.1344279117496152, 0.13479283517278814, 0.1220361105068523, 0.13009656652360516, 0.09168765743073048, 0.0595213319458897, 0.06079907353792704, 0.034936292642827785, 0.04643765903307888, 0.031313131313131314, 0.036105032822757115, 0.03296703296703297, -0.006012024048096192, 0.07636363636363637, 0.0690200210748156, 0.09569502074688796, 0.11177927131234525, 0.18342151675485008, 0.18734177215189873, 0.1301695923832193, 0.0876604146100691, 0.11013215859030837, 0.12157573013357482, 0.07083432374613739, 0.07622525918944392, 0.1032162562239268, 0.07491998836194355, 0.09633977900552486, 0.10670410670410671, 0.06162990771155952, 0.06546677215189874, 0.06598016781083142, 0.030709101060859854, 0.03908355795148248, 0.05604719764011799, 0.023255813953488372, 0.03433162892622352, 0.07115278543849972, 0.08946262383668568, 0.0651356993736952, 0.061035636936404805, 0.06824689786827871, 0.10632995514205018, 0.07976001411681666, 0.08556547619047619, 0.11183180496533214, 0.1336266153423151, 0.08437381763147939, 0.05655888396236617, 0.04718543046357616, 0.040043611854494995, 0.05038992201559688, 0.05496535796766744, 0.06084026952041221, 0.052749405344899955, 0.06979542719614922, 0.04920212765957447, 0.08016528925619834, 0.14360313315926893, 0.10491803278688525, 0.1925925925925926, 0.07344632768361582, 0.07526881720430108, 0.06199770378874857, 0.08172649065559182, 0.06776180698151951, 0.038135593220338986, 0.03348534201954397, 0.05541737913881548, 0.05517369496563255, 0.042950066960015305, 0.058769765103738235, 0.06808035714285714, 0.05888324873096447, 0.04765285295944627, 0.058144858529438695, 0.059437466831770744, 0.060988964703900264, 0.06545943961825523, 0.05509641873278237, 0.06578435188789412, 0.041666666666666664, 0.026188166828322017, 0.030583873957367932, 0.04551451187335093, 0.06293965198074787, 0.08522500995619275, 0.05840682376752927], "libDem": [0.014064015518913677, 0.010938924339106655, 0.004878048780487805, 0.005922165820642978, 0.0, 0.009558823529411765, 0.04233111046680197, 0.0466817627591012, 0.042501517911353974, 0.039559484132734385, 0.052891601278698054, 0.07498903669054231, 0.05547982551799346, 0.05481503669312566, 0.044786443022652604, 0.06798561151079137, 0.0661715057393653, 0.059308510638297875, 0.10157023624275004, 0.09896473065450079, 0.11720279720279721, 0.06778262407167275, 0.04814936128398297, 0.02414939382088385, 0.018426037540898915, 0.020023103581055062, 0.01580381471389646, 0.03762227238525207, 0.020246478873239437, 0.04031117397454031, 0.04262000897263347, 0.03424223208623969, 0.028136531365313654, 0.021310602024507193, 0.019359380499824004, 0.018156639482997384, 0.014115986354546525, 0.018045888115493684, 0.017857142857142856, 0.02172068555913796, 0.029551954242135366, 0.026252019386106624, 0.040723083035359556, 0.04015056461731493, 0.03255627009646302, 0.03396797922977066, 0.025009331840238895, 0.020286085825747726, 0.01583873290136789, 0.012338754907459339, 0.01745877788554801, 0.016722408026755852, 0.004451038575667656, 0.011272141706924315, 0.0339943342776204, 0.03213049925852694, 0.024367674275138803, 0.02416641174671153, 0.03230148048452221, 0.022523823274617383, 0.025032594524119947, 0.013329630658150514, 0.01698956780923994, 0.01525, 0.03416856492027335, 0.021549512570549, 0.01972136783064954, 0.011311725038068305, 0.03594420600858369, 0.03677581863979849, 0.020395421436004164, 0.01592356687898089, 0.01685162351006987, 0.012086513994910942, 0.00909090909090909, 0.04157549234135667, 0.016483516483516484, 0.008016032064128256, 0.007272727272727273, 0.011591148577449948, 0.021265560165975105, 0.013618677042801557, 0.01619368286034953, 0.016540084388185654, 0.016215412079738173, 0.026850937808489635, 0.01860009789525208, 0.010640706361784016, 0.0038031851675778463, 0.013901979264844487, 0.03377741892073745, 0.016147803316846086, 0.01571132596685083, 0.020182520182520182, 0.013765055529485374, 0.01483386075949367, 0.008390541571319604, 0.006700167504187605, -0.02628032345013477, -0.01032448377581121, 0.0021141649048625794, 0.01168736303871439, 0.012134583563154992, -0.03212248574001801, -0.022964509394572025, 0.001378224059854302, -0.005249761374482978, -0.0011629838843661739, 0.08099523557437797, 0.030319940476190476, 0.023708342652650413, 0.01154797910365686, 0.013999243284146803, 0.002162863631448037, 0.004552980132450331, 0.005947071067499257, 0.007712743165652584, 0.0010392609699769054, 0.00802615933412604, 0.009794319294809012, 0.002647412755716005, 0.004432624113475178, 0.0049586776859504135, 0.033942558746736295, 0.011475409836065573, 0.0, -0.01078582434514638, -0.006001500375093774, 0.002788256519599803, 0.00934440818748146, 0.008066881783514227, 0.002824858757062147, 0.0026058631921824105, 0.001709933157158402, -0.002600780234070221, 0.00449588674191697, 0.007403345215245407, 0.009186126373626374, 0.008121827411167513, 0.005235602094240838, 0.004853035436315356, 0.005306916681408102, 0.007834217841799343, 0.009421265141318977, 0.0073461891643709825, 0.0058388478007006615, 0.012152777777777778, 0.012609117361784675, 0.019462465245597776, 0.008575197889182058, 0.02332469455757127, 0.02429311031461569, 0.003614283648980772]}'); 


          updateDataSet(data);
          if (updateData) {
            updateData(data);

            var resultsIndex = indexOfDate(data.time, new Date(2016, 5, 23,
              1, 0, 0, 0));
          }

          loadGraph();

          if (!updateData) {
            rawData = data;
          }
        });
    }

    function updateDataSet() {
      data.time.forEach(function(element, i, arr) {
        arr[i] = moment(element).add(1, 'hours')._d; // convert from UTC - to UK summer + hour interval start -> interval end
      });
    }
  }

  function updateToPercentage(data) {
    for (i = 0; i < data.labour.length; i++) {
      var total = data.labour[i] + data.tory[i] + data.libDem[i] + data.tory[i];
      data.labour[i] = 100 * data.labour[i] / total;
      data.tory[i] = 100 * data.tory[i] / total;
      data.libDem[i] = 100 * data.libDem[i] / total;
      data.snp[i] = 100 * data.snp[i] / total;
    }
  }

})();
